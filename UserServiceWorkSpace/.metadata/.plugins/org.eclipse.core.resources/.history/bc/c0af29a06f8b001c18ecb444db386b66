package com.epam.userservice;

import static org.mockito.Mockito.doNothing;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import java.util.ArrayList;
import java.util.List;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;

import com.epam.userservice.entity.UserEntity;
import com.epam.userservice.service.UserServcieImpl;
import com.fasterxml.jackson.databind.ObjectMapper;

@ExtendWith(MockitoExtension.class)
public class UserControllerTest {
	@MockBean
	UserServcieImpl userService;
	@Autowired
	MockMvc mockMvc;
	ObjectMapper objectMapper;
	UserEntity userEntity;
	List<UserEntity> userList=new ArrayList<>();

	@BeforeEach
	public void setUp() {
		userEntity = new UserEntity("Ajeet@123","ajeet@gmail.com","ajeet");
		objectMapper = new ObjectMapper();

		userList.add(new UserEntity("Ajeet@123","ajeet@gmail.com","ajeet"));
		userList.add(new UserEntity("Akash@123","Akash@gmail.com","Akash"));
	}
	
	@Test
	void getAllBookTest() throws Exception {
		when(userService.getAllUser()).thenReturn(bookList);
		mockMvc.perform(get("/books").contentType(MediaType.APPLICATION_JSON_VALUE))
				.andExpect(status().isOk());
	}
	

	@Test
	void getBookByBookIdTest() throws Exception {
		when(userService.getBookByBookId(1)).thenReturn(userEntity);
		mockMvc.perform(get("/books/1").content("1")).andExpect(status().isOk());
	}
	
	@Test
	void addBookTest() throws Exception {
		BookDTO book = new BookDTO(1, "ajeet", "ajeet", "ajeet");
		when(userService.addBook(book.getBook())).thenReturn(book.getBook());
		ObjectMapper objectMapper=new ObjectMapper();
		String json=objectMapper.writeValueAsString(book);
		mockMvc.perform(post("/books").contentType(MediaType.APPLICATION_JSON_VALUE).content(json)).andExpect(status().isOk());
	}
	
	@Test
	void deleteBookTest() throws Exception {
		when(userService.deleteBook(1)).thenReturn(true);
		mockMvc.perform(delete("/books/1").content("1")).andExpect(status().isOk());
	}
	
	@Test
	void deleteBookByInvalidBooIdTest() throws Exception {
		when(userService.deleteBook(1)).thenReturn(false);
		mockMvc.perform(delete("/books/1").content("1asa")).andExpect(status().isNotFound());
	}
	
	@Test
	void updateBookTest() throws Exception {
		BookDTO book = new BookDTO(1, "ajeet", "ajeet", "ajeet");
		when(userService.getBookByBookId(1)).thenReturn(book.getBook());
		doNothing().when(userService).validateBook(1,2);
		when(	userService.addBook(book.getBook())).thenReturn(book.getBook());
		ObjectMapper objectMapper=new ObjectMapper();
		String json=objectMapper.writeValueAsString(book);
		mockMvc.perform(put("/books/1").contentType(MediaType.APPLICATION_JSON_VALUE).content(json)).andExpect(status().isOk());
	}
}
