package com.epam.libraryservice;

import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import com.epam.libraryservice.entity.BookEntity;
import com.epam.libraryservice.entity.UserDTO;
import com.epam.libraryservice.entity.UserEntity;
import com.epam.libraryservice.feign.BookFeignClient;
import com.epam.libraryservice.feign.UserFeignClient;
import com.epam.libraryservice.repository.LibraryRepository;
import com.epam.libraryservice.service.FeignService;
import com.epam.libraryservice.service.LibraryService;
import com.fasterxml.jackson.databind.ObjectMapper;

@ExtendWith(MockitoExtension.class)
public class LibraryServiceTest {

	@InjectMocks
	LibraryService libraryService;
	@MockBean
	LibraryRepository libraryRepository;
	@MockBean
	BookFeignClient bookFeignClient;
	@MockBean
	UserFeignClient userFeignClient;
	@MockBean
	FeignService feignService;
	ObjectMapper objectMapper;
	UserEntity userEntity;
	UserDTO user = new UserDTO("Ajeet@123", "ajeet@gmail.com", "ajeet");
	BookEntity bookEntity = new BookEntity(1, "ajeet", "ajeet", "ajeet");
	List<UserEntity> userList = new ArrayList<>();
	ResponseEntity<UserDTO> userResponse = new ResponseEntity<>(user, HttpStatus.OK);
	ResponseEntity<BookEntity> bookResponse = new ResponseEntity<>(bookEntity, HttpStatus.OK);

	@BeforeEach
	public void setUp() {
		userEntity = new UserEntity("Ajeet@123", "ajeet@gmail.com", "ajeet");
		objectMapper = new ObjectMapper();
		userList.add(new UserEntity("Ajeet@123", "ajeet@gmail.com", "ajeet"));
		userList.add(new UserEntity("Akash@123", "Akash@gmail.com", "Akash"));
	}

	@Test
	void testIssueBookToUser()
	{String username="Ajeet@123";
	int bookId=1;
	
		when(userFeignClient.getUser(username)).thenReturn(userResponse);
		when(	bookFeignClient.getBook(bookId)).thenReturn(bookResponse);
	}

}
