package com.epam.libraryservice;

import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import java.util.ArrayList;
import java.util.List;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;

import com.epam.libraryservice.entity.UserDTO;
import com.epam.libraryservice.entity.UserEntity;
import com.epam.libraryservice.service.FeignService;
import com.epam.libraryservice.service.LibraryService;
import com.fasterxml.jackson.databind.ObjectMapper;

@SpringBootTest
@AutoConfigureMockMvc
class LibraryControllerTest {

	@MockBean
	FeignService feignService;
	@MockBean
	LibraryService libraryService;
	@Autowired
	MockMvc mockMvc;
	
	ObjectMapper objectMapper;
	UserEntity userEntity;

	@BeforeEach
	public void setUp() {
		
		userEntity = new UserEntity("Ajeet@123", "ajeet@gmail.com", "ajeet");
		objectMapper = new ObjectMapper();

	}
	
	@Test
	void addUserTest() throws Exception {
		UserDTO user = new UserDTO("Ajeet@123", "ajeet@gmail.com", "ajeet");
		ResponseEntity<UserDTO> userResponse = new ResponseEntity<>(user, HttpStatus.OK);
		when(feignService.addUser(user)).thenReturn(userResponse);
		ObjectMapper objectMapper = new ObjectMapper();
		String json = objectMapper.writeValueAsString(user);
		mockMvc.perform(post("/library/users").contentType(MediaType.APPLICATION_JSON_VALUE).content(json)).andExpect(status().isOk());
	}
	
	@Test
	void getAllUserTest() throws Exception {
		List<UserDTO> userList=new ArrayList<>(); 
			 userList.add(new UserDTO("Ajeet@123", "ajeet@gmail.com", "ajeet"));
			 userList.add(new UserDTO("Akash@123", "Akash@gmail.com", "Akash"));
		ResponseEntity<List<UserDTO>> userList=new ResponseEntity<List<UserDTO>>(null, null);
	
		when(feignService.getAllUsers()).thenReturn((ResponseEntity<List<UserDTO>>) userList);
		mockMvc.perform(get("/library/users").contentType(MediaType.APPLICATION_JSON_VALUE)).andExpect(status().isOk());
	}
}
